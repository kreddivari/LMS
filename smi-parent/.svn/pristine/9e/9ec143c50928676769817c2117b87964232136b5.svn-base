angular.module('smiApp')
 .controller('SpamCasesController', function($scope, $state, $modal, OpenfacebookCaseService,$rootScope,$log,dialogs,ResolvedCaseService) {
		$scope.isSelect = true;
		$scope.ischecked = false;
		$scope.categoryId = 0;
		$scope.priorityId = 0;
		account_type = 1;
		$scope.accountType = account_type.toString();
		$scope.spamCaseJson = {};
		$scope.socialProfileId = 0;
		$scope.moreOptions = [ { id : 1, name : 'Group Selected Cases'}, 
		                       { id : 2, name : 'Assign Selected Cases'},
		                       { id : 3, name : 'Append Notes'},
		                       { id : 4, name : 'Not a Spam'}]; 
		$scope.spamCases = [];
		$scope.spamCaseJson = {
				"category_type" :	$scope.categoryId,
				"priority_type" :	$scope.priorityId,
				"account_type"  :	$scope.socialProfileId
				};
		$rootScope.initializespamCasesController = function() {
			ResolvedCaseService.getSpamCaseByCriteria($scope.spamCaseJson).then(function(response) {
						$scope.spamCases = response.data.cmfCaseBO;
					});
			$scope.getCategories();
		};
		$scope.getCategories = function() {
				OpenfacebookCaseService.getStaticData().then(function(response) {
						$scope.categories = response.data.cmfCaseCategoryBOList;
						$scope.priorities = response.data.cmfCasePriorityBOList;
						for ( var i = 0; i < response.data.cmfCasePriorityBOList.length; i++) {
							var obj = response.data.cmfCasePriorityBOList[i];
							obj.priorityImage = (response.data.cmfCasePriorityBOList[i].priority_name).charAt(0);
						}
						$scope.accounts = response.data.socialProfilesBOList;
				});
		}, 
		$scope.getSpamCasesByAccountCategory = function(categoryId) {
			$scope.spamCaseJson.category_type = categoryId.toString();
			$scope.getSpamCases();
		}, 
		$scope.getSpamCasesByPriority = function(priorityId) {
			$scope.spamCaseJson.priority_type = priorityId.toString();
			$scope.getSpamCases();
		};
		$scope.getSpamCasesByAccount = function(socialProfileId) {
			$scope.spamCaseJson.account_type = socialProfileId.toString();
			$scope.getSpamCases();
		};
		$scope.getAllPriorities = function() {
			$scope.spamCaseJson.priority_type =  "All";
			$scope.getSpamCases();
		};
		$scope.getAllCategories = function() {
			$scope.spamCaseJson.category_type =  "All";
			$scope.getSpamCases();
		};
		$scope.getAllAccounts = function() {
			$scope.spamCaseJson.account_type =  "All";
			$scope.getSpamCases();
		};
		$scope.getSpamCases = function() {
			ResolvedCaseService.getSpamCaseByCriteria($scope.spamCaseJson).then(function(response) {
						$scope.spamCases = response.data.cmfCaseBO;
					});
		};
		$scope.highliteCategory = null;
		$scope.sethighliteCategory = function(index) {
			$scope.highliteCategory = index;
		};
		$scope.highlitePriority = null;
		$scope.sethighlitePriority = function(index) {
			$scope.highlitePriority = index;
		};
		$scope.highliteAccount = null;
		$scope.sethighliteAccount = function(index) {
			$scope.highliteAccount = index;
		};
		$scope.refreshSpamCases = function() {
			$rootScope.initializespamCasesController();
		};
		/*$scope.caseDetails = function(cases) {
			var params = {};
			if (cases != null) {
				params.case_id = cases.case_id;
			}
			$state.go('viewindividualcasedetails', params);
			$rootScope.customerId = cases.cmfCustomerBO.customerId;
			$rootScope.caseid = cases.case_id;
		};*/

		var  selectedCases = [];
		var  selectedCaseDetails = [];
		$scope.getSelectedValue = function(cases) {
			$scope.isSelect = false;
			selectedCases.push(cases.case_id);
			selectedCaseDetails.push(cases);
			
		};

		$scope.getOption = function(id) {
			if (id == 4) {
					var dlg = dialogs.confirm("Confirmation", "Are you sure want to mark this case as Not a Spam?",{size:'md'});
				       dlg.result.then(function (btn) {
				    	   var spamCaseJSON = {
			    				      "cmf_case":[]
			    			};
				    	   spamCaseJSON.cmf_case[i] = {};
					    	for(var i =0;i<selectedCases.length;i++) {
					    		spamCaseJSON.cmf_case[i] = selectedCases[i];
					    	};
					    	alert(JSON.stringify(spamCaseJSON));
				    	   ResolvedCaseService.notASpamCase(spamCaseJSON).then(function(response){
				    		   $rootScope.initializespamCasesController();
				    	   })
					   //Yes is clicked
				    	  
					 });
				
			} else if(id==3) {
				var modalInstance = $modal.open({
					templateUrl : 'spamAppendNotes.html',
					controller : 'spamAppendNotesController',
					resolve: {
						 selectedCases: function () {
			    	        var obj = {};
				        	obj.selectedCases = selectedCases;
					        return obj;
			    	     }
			    	}
				});

				
			} else if(id == 2) {
				
				var modalInstance = $modal.open({
					templateUrl : 'spamAssignCase.html',
					controller : 'spamAssignCaseController',
				
				 resolve: {
					 selectedCases: function () {
				        	 var obj = {};
			      		     obj.selectedCases = selectedCases;
				             return obj;
				       }
				      }
				});
			} else if(id == 1) {
				
				var modalInstance = $modal.open({
					templateUrl : 'spamGroupCase.html',
					controller : 'spamGroupCaseController',
					resolve: {
						items: function () {
			    	        	 var obj = {};
			    	        	 obj.priority = $scope.priorities;
				        		 obj.selectedCases=selectedCases;
				        		 obj.selectedCaseDetails = selectedCaseDetails;
				        		 obj.accountType =$scope.accountType;
					        	 return obj;
			    	      }
			        }
				});
			}
		};
		 $scope.Search = '';
		    $scope.search = function (user) {
		      var query = $scope.Search;
		      var fullname = user.cmfCustomerBO.firstName+ ' ' + user.cmfCustomerBO.lastName;
		      if (fullname.indexOf(query) != -1) {
		        return true;
		      }
		      return false;
		    }; 
 }).controller('spamAssignCaseController',  function ($scope, $modalInstance,$rootScope,OpenfacebookCaseService,selectedCases ) {
		
		$scope.getAssignedUserId= function(user) {
			$scope.user=user
		};
		OpenfacebookCaseService.getAllUsers().then(function(response) {
			$scope.users = response.data.cmfCasesUsers;
			});
		
		    $scope.SaveSpamAssignCase = function () {
		    	var SaveSpamAssignCaseJSON = {
 				      "user_name":$scope.spamassignusrname,
 				      "reason": $scope.reasons,
 				      "cmf_case":[]
 				};
		    	SaveSpamAssignCaseJSON.cmf_case[i] = {};
		    	  for(var i =0;i<selectedCases.selectedCases.length;i++)
		    	  {
		    		  SaveSpamAssignCaseJSON.cmf_case[i] = selectedCases.selectedCases[i];
		    	  };
		    OpenfacebookCaseService.saveSelectedCases(SaveSpamAssignCaseJSON).then(function(result){
		    	$rootScope.initializespamCasesController();
	    	});
		    $modalInstance.close();
		    
	    };
	    $scope.close = function () {
	    	alert("close");
			$modalInstance.dismiss('close');
	    };
		  
}).controller('spamAppendNotesController', function($scope,$modal,$state,$modalInstance,selectedCases,OpenfacebookCaseService) {
			
			$scope.saveSpamAppendNotes = function () {
		    	var saveSpamAppendNotesJSON = {
 				      "note_description": $scope.appendnotesspam,
 				      "cmfcase":[]
 			    };
		    	saveSpamAppendNotesJSON.cmfcase[i] = {};
		    	  for(var i =0;i<selectedCases.selectedCases.length;i++) {
		    		  saveSpamAppendNotesJSON.cmfcase[i] = selectedCases.selectedCases[i];
		    	  };
		    	OpenfacebookCaseService.saveAppendNotes(saveSpamAppendNotesJSON).then(function(result){
		    		$rootScope.initializespamCasesController();
		    	});
		    	 $modalInstance.close();
		    };
		  
			$scope.close = function () {
				$modalInstance.dismiss('close');
		    };
}).controller('spamGroupCaseController', function ($scope, $modal, $state, $modalInstance,OpenfacebookCaseService,items,dialogs) {
	
	var isCritical=false;
	var isHigh=false;
	var isMedium=false;
	var isLow=false;
	$scope.prioritees=items.priority;
	$scope.selectedIndividualCaseDetails=[];
			
	for(var i =0;i<items.selectedCases.length;i++) {
		$scope.casesid = items.selectedCases[i];
		    for(var j =0;j<items.selectedCaseDetails.length;j++) {
		    	$scope.casesobj = items.selectedCaseDetails[j];
		    		  if($scope.casesid==items.selectedCaseDetails[j].case_id) {
		    			  $scope.selectedIndividualCaseDetails.push(items.selectedCaseDetails[j]);
		    		  }
		    }
	}
					
	for(var i=0;i<items.selectedCaseDetails.length;i++){
		var  cmfCasePriority =   items.selectedCaseDetails[i].cmfCasePriorityBO;
			if(cmfCasePriority.priority_name=='CRITICAL'){
				$scope.criticalId=cmfCasePriority.priority_id;
					isCritical = true;
			}
            if(cmfCasePriority.priority_name=='HIGH'){
                $scope.highId=cmfCasePriority.priority_id;
                    isHigh = true;
			}
            if(cmfCasePriority.priority_name=='MEDIUM'){
                 $scope.mediumId=cmfCasePriority.priority_id;
                     isMedium = true;
			}
            if(cmfCasePriority.priority_name=='LOW'){
                 $scope.lowId=cmfCasePriority.priority_id;
                     isLow = true;
			}
						        
	} 
	if(isCritical){
		$scope.priorityId=$scope.criticalId;
	    } else if(isHigh) {
		$scope.priorityId=$scope.highId;
	    } else if(isMedium) {
		$scope.priorityId=$scope.mediumId;
	    } else if(isLow) {
		$scope.priorityId=$scope.lowId;
    }

	OpenfacebookCaseService.getAllUsers().then(function(response) {
		$scope.users = response.data.cmfCasesUsers;
		for(var i=0;i<$scope.users.length;i++){
			$scope.name=$scope.users[i].firstName+"  "+$scope.users[i].lastName
			$scope.users[i].userName=$scope.name;
		}
	});
	$scope.accountType = items.accountType;
	$scope.status = items.selectedCaseDetails[0].cmfCaseStatusBO.caseStatusId;
	$scope.categoryId = items.selectedCaseDetails[0].cmfCaseCategoryBO.category_id;
	$scope.customerId = items.selectedCaseDetails[0].cmfCustomerBO.customerId;
	$scope.socialAccountId = items.selectedCaseDetails[0].socialMediaAccountsBO.social_media_accounts_id;
	$scope.userName = items.selectedCaseDetails[0].userBO.userName;
	$scope.groupCaseFlag = 'yes';
	
	$scope.saveSpamGroupcase = function () {
		
    	  var  cmfCases=[];
    	  var  groupCase=[];
    	  var  groupCaseBOs={};
	    	for(var i=0;i<items.selectedCases.length;i++) {
	    		  var  selectedCasesObj = {};
	    		selectedCasesObj.case_id = items.selectedCases[i];
	    		groupCase.push(selectedCasesObj);
	    		groupCaseBOs.groupCaseBOs= groupCase;
	    	};
	    	  var requestData = {
	    			  "case_id" : "",
	    			  "name" : $scope.casename,
						"socialProfilesBO" : {
							"social_profile_accounts_id" : $scope.accountType,
							"social_media_accounts" : []
						},
						"cmfCaseStatusBO" : {
							"caseStatusId" : $scope.status
						},
					   "cmfCaseCategoryBO":{
							  "category_id" : $scope.categoryId
					   },
	    			  "userBO" : {
	    			  "userId" : $scope.assignto
	    			  },
	    			  "cmfCustomerBO" : {
							"customerId" : $scope.customerId
						},
						"socialMediaAccountsBO" : {
							"social_media_accounts_id" : $scope.socialAccountId
						},
	    			  "cmfCasePriorityBO" : {
	    			  "priority_id" : $scope.priorityId
	    			  },
	    			  "cmfCaseNotesBO" : [ {
	    			  "noteDescription" :  $scope.reasons,
	    			  } ],
	    			  "description" : $scope.description,
	    			  "cmfGroupCaseList":groupCaseBOs,
	    			  "group_case_flag": $scope.groupCaseFlag,
	    			  "updated_by" : $scope.userName, 
	    			  "group_case_id":0
	    			  };
	    	OpenfacebookCaseService.saveGroupCases(requestData).then(function(result){
	    		
	    	});
	    
		
	    	 if ($scope.priorityId == null || $scope.priorityId == undefined) {
				 dialogs.error("ERROR","Please enter the Priority",{size:'md'});					
				 return false;
			}
		    if ($scope.assignto == null || $scope.assignto == undefined) {
				 dialogs.error("ERROR","Please enter the AssignTo",{size:'md'});					
				 return false;
			}
		    if ($scope.description == null || $scope.description == undefined) {
				 dialogs.error("ERROR","Please enter the Case Description",{size:'md'});					
				 return false;
			}
		    if ($scope.reasons == null || $scope.reasons == undefined) {
				 dialogs.error("ERROR","Please enter Reasons for Grouping",{size:'md'});					
				 return false;
			}
	};
		$scope.close = function () {
			$modalInstance.dismiss('close');
		};
});

