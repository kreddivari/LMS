package com.zen.smi.controller;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.google.gson.Gson;
import com.zen.smi.bo.Account;
import com.zen.smi.bo.SocialMediaAccountPostsBO;
import com.zen.smi.bo.SocialMediaAccountsSearchBO;
import com.zen.smi.bo.SocialMediaPostsBO;
import com.zen.smi.bo.SocialMediaPostsBOList;
import com.zen.smi.exception.BusinessException;
import com.zen.smi.extsys.service.FaceBookService;
import com.zen.smi.generic.utils.DateUtil;
import com.zen.smi.generic.utils.MessageUtil;
import com.zen.smi.service.SocialMediaPostsService;


@Controller
@RequestMapping("/social_media_posts")
public class SocialMediaPostsController extends BaseController {

	/**
	 * Logger for SocialMediaPostsController class.
	 */
	private static final Logger LOGGER = Logger.getLogger(SocialMediaPostsController.class);

	@Autowired
	public SocialMediaPostsService socialMediaPostsService;

	@Autowired
	public Gson gson;
	
	
	@RequestMapping(value = "/list", method = RequestMethod.GET)
	public @ResponseBody String getSocialMediaPostsBO(HttpServletRequest request,
			HttpServletResponse response) {
		LOGGER.info("starts getSocialMediaPostsBO");
		String resultJson = null;
		
		try {
			
			List<SocialMediaPostsBO> socialMediaPostsBO= socialMediaPostsService.getSocialMediaPosts();
			SocialMediaPostsBOList socialMediaPostsBOList = new SocialMediaPostsBOList();
			socialMediaPostsBOList.setSocialMediaPostsBOList(socialMediaPostsBO);
			resultJson = gson.toJson(socialMediaPostsBOList, SocialMediaPostsBOList.class);
			resultJson = handleSuccess(resultJson, null);
			
		} catch (BusinessException be) {
			be.printStackTrace();
			resultJson = handleBusinessError(be);
		} catch (Throwable th) {
			th.printStackTrace();
			resultJson = handleOtherError(th);
		}
		LOGGER.info("ends getSocialMediaPostsBO");
		return resultJson;
	}
	
	@RequestMapping(value = "/list/{channel}", method = RequestMethod.GET)
	public @ResponseBody String getSocialMediaPostsBOByChannel(@PathVariable("channel") int channel,HttpServletRequest request,
			HttpServletResponse response) {
		LOGGER.info("starts getSocialMediaPostsBOByChannel");
		String resultJson = null;
		try {
			
			List<SocialMediaPostsBO> socialMediaPostsBO= socialMediaPostsService.getSocialMediaPostsByChannel(channel);
			SocialMediaPostsBOList socialMediaPostsBOList = new SocialMediaPostsBOList();
			socialMediaPostsBOList.setSocialMediaPostsBOList(socialMediaPostsBO);
			resultJson = gson.toJson(socialMediaPostsBOList, SocialMediaPostsBOList.class);
			resultJson = handleSuccess(resultJson, null);
			
		} catch (BusinessException be) {
			be.printStackTrace();
			resultJson = handleBusinessError(be);
		} catch (Throwable th) {
			th.printStackTrace();
			resultJson = handleOtherError(th);
		}
		LOGGER.info("ends getSocialMediaPostsBOByChannel");
		return resultJson;
	}
	
	@RequestMapping(value = "/{id}", method = RequestMethod.GET)
	public @ResponseBody String getSocialMediaPostsBOById(@PathVariable("id") int id,HttpServletRequest request,
			HttpServletResponse response) {
		LOGGER.info("starts getSocialMediaPostsBOById");
		String resultJson = null;
		try {
			
			SocialMediaPostsBO socialMediaPostsBO= socialMediaPostsService.getSocialMediaPostsId(id);				
			socialMediaPostsBO.setCreatedDateString(""+socialMediaPostsBO.getCreatedDate().getTime());
			resultJson = gson.toJson(socialMediaPostsBO, SocialMediaPostsBO.class);
			resultJson = handleSuccess(resultJson, null);
			
		} catch (BusinessException be) {
			be.printStackTrace();
			resultJson = handleBusinessError(be);
		} catch (Throwable th) {
			th.printStackTrace();
			resultJson = handleOtherError(th);
		}
		LOGGER.info("ends getSocialMediaPostsBOById");
		return resultJson;
	}
	
	

	
	
	@RequestMapping(value = "/save", method = RequestMethod.POST)
	public @ResponseBody String saveSocialMediaPostsBO(
			@RequestParam("file") MultipartFile file, 
    		@RequestParam("requestJson") String requestJson,
			HttpServletRequest request,
			HttpServletResponse response) {
		
		//Calendar calender=getCalenderTime(milliSeconds)
		LOGGER.info("starts saveSocialMediaPostsBO");
		String resultJson = "";		
		String imagePath = request.getSession().getServletContext().getRealPath("/")+"resources\\ext-data";
		try {
			
			SocialMediaPostsBO	socialMediaPostsBO=gson.fromJson(requestJson, SocialMediaPostsBO.class);
			if(socialMediaPostsBO!=null){
				
			   byte[] decodedBytes = file.getBytes();
			   String result=writeToFile( decodedBytes, imagePath,socialMediaPostsBO.getExtension());
			   if(result!=""){
				   Date date=new Date(Long.parseLong(socialMediaPostsBO.getCreatedDateString()));
				   socialMediaPostsBO.setCreatedDate(date); 
				   socialMediaPostsBO.setImageFullPath(imagePath+"\\"+result);
				   socialMediaPostsBO.setImageName(result);
				   socialMediaPostsService.savePost(socialMediaPostsBO);
					resultJson = handleSuccess(resultJson, MessageUtil.getInstance().getMessage("SOCIAL_MEDIA_POSTS_CREATED", null));
			   }else{
				   BusinessException be=new BusinessException("","",result);
					resultJson =  handleBusinessError(be);
			   }				
			}
			
		} catch (BusinessException be) {
			be.printStackTrace();
			resultJson = handleBusinessError(be);
		} 
		catch (FileNotFoundException e) {	       
			e.printStackTrace();
			resultJson = handleOtherError(e);
	    } catch (IOException ioe) {	      
	    	ioe.printStackTrace();
			resultJson = handleOtherError(ioe);
	    }
		catch (Throwable th) {
			th.printStackTrace();
			resultJson = handleOtherError(th);
		}
		LOGGER.info("ends saveSocialMediaPostsBO");
		return resultJson;
	}
	
	
	@RequestMapping(value = "/update", method = RequestMethod.POST)
	public @ResponseBody String editSocialMediaPostsBO(
			@RequestParam("file") MultipartFile file, 
    		@RequestParam("requestJson") String requestJson,
			HttpServletRequest request,
			HttpServletResponse response) {
		LOGGER.info("starts editSocialMediaPostsBO");
		String resultJson = null;
		String resultFromWriter=null;
		 boolean result=false;
		String imagePath = request.getSession().getServletContext().getRealPath("/")+"resources\\ext-data";
		try {
			SocialMediaPostsBO	socialMediaPostsBO=gson.fromJson(requestJson, SocialMediaPostsBO.class);
			
			if(file!=null){		
				 SocialMediaPostsBO socialMediaPostsBOFromDB=socialMediaPostsService.getSocialMediaPostsId(socialMediaPostsBO.getId());
				 
				 if(socialMediaPostsBO.getImageName().equals(socialMediaPostsBOFromDB.getImageName())){
					 
					 result=true;
					 resultFromWriter=socialMediaPostsBOFromDB.getImageName();
					 
				 }else{
					 
					 result=deleteFile(imagePath+"\\"+socialMediaPostsBOFromDB.getImageName());				 
					 if(result){						 
						  byte[] decodedBytes = file.getBytes();
						  resultFromWriter =writeToFile( decodedBytes, imagePath,socialMediaPostsBO.getExtension());
					  }	
					 
				 }
				  			  
				   if(resultFromWriter!=""){
					   Date date=new Date(Long.parseLong(socialMediaPostsBO.getCreatedDateString()));
					   socialMediaPostsBO.setCreatedDate(date); 
					   socialMediaPostsBO.setImageName(resultFromWriter);
					   socialMediaPostsBO.setImageFullPath(imagePath+"\\"+resultFromWriter);
					   socialMediaPostsService.editPost(socialMediaPostsBO);
					   
					   resultJson = handleSuccess(resultJson, MessageUtil.getInstance().getMessage("SOCIAL_MEDIA_POSTS_UPDATED", null));
				   }
			 }else{
				 
				 throw new BusinessException("","","Empty File");
			 }			
			
		} catch (BusinessException be) {
			be.printStackTrace();
			resultJson = handleBusinessError(be);
		} 
		catch (FileNotFoundException e) {	       
			e.printStackTrace();
			resultJson = handleOtherError(e);
	    } catch (IOException ioe) {	      
	    	ioe.printStackTrace();
			resultJson = handleOtherError(ioe);
	    }
		catch (Throwable th) {
			th.printStackTrace();
			resultJson = handleOtherError(th);
		}
		LOGGER.info("ends editSocialMediaPostsBO");
		return resultJson;
	}
	@RequestMapping(value = "/update_with_no_file", method = RequestMethod.POST)
	public @ResponseBody String editSocialMediaPosts(
	    @RequestBody String requestJson,
	HttpServletRequest request,
	HttpServletResponse response) {
	LOGGER.info("starts editSocialMediaPostsBO");
	String resultJson = null;
	 
	 
	try {
	          SocialMediaPostsBO socialMediaPostsBO=gson.fromJson(requestJson, SocialMediaPostsBO.class);
	        Date date=new Date(Long.parseLong(socialMediaPostsBO.getCreatedDateString()));
	  socialMediaPostsBO.setCreatedDate(date);  
	  socialMediaPostsService.editPost(socialMediaPostsBO);
	  resultJson = handleSuccess(resultJson, MessageUtil.getInstance().getMessage("SOCIAL_MEDIA_POSTS_UPDATED", null));
	 
	 
	} catch (BusinessException be) {
	be.printStackTrace();
	resultJson = handleBusinessError(be);
	} 
	 
	catch (Throwable th) {
	th.printStackTrace();
	resultJson = handleOtherError(th);
	}
	LOGGER.info("ends editSocialMediaPostsBO");
	return resultJson;
	}
	@RequestMapping(value = "/delete", method = RequestMethod.POST)
	public @ResponseBody String deleteSocialMediaPostsBO(@RequestBody String inputString,HttpServletRequest request,
			HttpServletResponse response) {
		LOGGER.info("starts deleteSocialMediaPostsBO");
		String resultJson = null;
		String imagePath = request.getSession().getServletContext().getRealPath("/");
		try {
			SocialMediaPostsBO	socialMediaPostsBO=gson.fromJson(inputString, SocialMediaPostsBO.class);
			if(socialMediaPostsBO!=null){
				SocialMediaPostsBO	socialMediaPostsBOFromDB=socialMediaPostsService.getSocialMediaPostsId(socialMediaPostsBO.getId());
				boolean result=deleteFile(imagePath+"\\"+socialMediaPostsBOFromDB.getImageName());
				socialMediaPostsService.deletePost(socialMediaPostsBOFromDB);
				if(result){
					resultJson = handleSuccess(resultJson, MessageUtil.getInstance().getMessage("SOCIAL_MEDIA_POSTS_DELETED", null));
				}
				
			}
			
		} catch (BusinessException be) {
			be.printStackTrace();
			resultJson = handleBusinessError(be);
		} catch (Throwable th) {
			th.printStackTrace();
			resultJson = handleOtherError(th);
		}
		LOGGER.info("ends deleteSocialMediaPostsBO");
		return resultJson;
	}
	
	@RequestMapping(value = "/socialmediapostsbysearchcriteria", method = RequestMethod.POST)
	public @ResponseBody String getSocialMediaPostsBySearchCriteria(@RequestBody String seatchString,HttpServletRequest request,
			HttpServletResponse response) {
		LOGGER.info("starts getSocialMediaPostsBySearchCriteria");
		String resultJson = null;
		try {
			SocialMediaAccountsSearchBO	socialMediaAccountsSearchBO=gson.fromJson(seatchString, SocialMediaAccountsSearchBO.class);

			 
//			List<SocialMediaAccountPostsBO> getSocialMediaPostsBySearchCriteria(Integer socialProfile,List<Integer> socialMediaAccountIds,Date startDate,Date endDate ) throws BusinessException;	
//			Date stDate = DateUtil.getInstance().convertStringToDate("15-08-23 14:14:39", "yy-MM-dd HH:mm:ss");
//			Date endDate = DateUtil.getInstance().convertStringToDate("15-08-25 14:14:39", "yy-MM-dd HH:mm:ss");
			String startDate = socialMediaAccountsSearchBO.getFromDate()+" 00:00:00";
			String edDate = socialMediaAccountsSearchBO.getToDate()+" 24:59:59";
			Date stDate = DateUtil.getInstance().convertStringToDate(startDate, "yy-MM-dd HH:mm:ss");
			Date endDate = DateUtil.getInstance().convertStringToDate(edDate, "yy-MM-dd HH:mm:ss");
			
			
//			List<Integer> ids = new ArrayList<Integer>();
//			ids.add(23);
//			ids.add(44);
			
			List<SocialMediaAccountPostsBO> socialMediaAccountPostsBO= socialMediaPostsService.getSocialMediaPostsBySearchCriteria(socialMediaAccountsSearchBO.getSocialProfileId(), socialMediaAccountsSearchBO.getAccountIdList(), stDate, endDate);		
			
			SocialMediaPostsBOList socialMediaPostsBOList = new SocialMediaPostsBOList();
			socialMediaPostsBOList.setSocialMediaAccountPostsBO(socialMediaAccountPostsBO);
			resultJson = gson.toJson(socialMediaPostsBOList, SocialMediaPostsBOList.class);
			resultJson = handleSuccess(resultJson, null);
			
		} catch (BusinessException be) {
			be.printStackTrace();
			resultJson = handleBusinessError(be);
		} catch (Throwable th) {
			th.printStackTrace();
			resultJson = handleOtherError(th);
		}
		LOGGER.info("ends getSocialMediaPostsBySearchCriteria");
		return resultJson;
	}
	
	public String writeToFile(byte[] imageData,String imgPath,String ext) throws IOException,FileNotFoundException{
		
        String DateToStr ="post_image_"+System.currentTimeMillis()+"."+ext+"";
		String result="";
		
	    final File imageFile = new File(imgPath, ""+DateToStr+"");
	    FileOutputStream outputStream = null;
	    try {
	    	outputStream = new FileOutputStream(imageFile);
	    	outputStream.write(imageData);
	    	result=DateToStr;
	    }
	  
	    finally {
	        if(outputStream != null){
	        	outputStream.close();	        	
	        }
	         
	    }
		return result;
	}
	public boolean deleteFile(String filePath){
		
		boolean result=false;
            try{
    		
    		File file = new File(filePath);
    		if(file.exists()){
    		if(file.delete()){
    			result= true;
    		}else{
                throw new BusinessException(MessageUtil.getInstance().getMessage("SOCIAL_MEDIA_POSTS_DELETED_ERROR", null));
    	    	}
    		} 
    	}catch(Exception e){
    		
    		e.printStackTrace();
    		
    	}
		return result;
		
		
	}
	
	public Calendar getCalenderTime(String milliSeconds){
		
		
	        long geTime= Long.parseLong(milliSeconds);
	        Calendar calendar = Calendar.getInstance();
	        calendar.setTimeInMillis(geTime);
		return calendar;
	}
	
	
}
