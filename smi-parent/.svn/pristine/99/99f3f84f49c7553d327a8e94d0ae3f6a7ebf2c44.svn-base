package com.zen.smi.controller;

import java.io.IOException;
import java.io.InputStream;
import java.util.List;
import java.util.Properties;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.env.Environment;
import org.springframework.stereotype.Controller;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.zen.smi.exception.BusinessException;
import com.zen.smi.extsys.facebook.bo.Group;
import com.zen.smi.extsys.facebook.bo.GroupList;
import com.zen.smi.extsys.facebook.bo.GroupMetaDataBO;
import com.zen.smi.extsys.service.FaceBookService;

/**
 * FaceBookController is to fetch the groups and posts related data from facebook.
 * 
 * @author kalyan
 */
@Controller
@RequestMapping("/groups")
public class FaceBookController extends BaseController {

	/**
	 * Logger for FaceBookController class.
	 */
	private static final Logger LOGGER = Logger.getLogger(FaceBookController.class);

	@Autowired
	public FaceBookService faceBookService;

	
	 @Autowired
	 private Environment env;
	/**
	 * This method is to get all the groups  information from facebook.
	 * 
	 * @param request
	 * @param response
	 * @return GroupList
	 */
	@RequestMapping(value = "/list/{group_name}", method = RequestMethod.GET)
	public @ResponseBody String getFacebookGroupsByName(@PathVariable("group_name") String groupName,HttpServletRequest request,
			HttpServletResponse response) {
		LOGGER.info("starts getFacebookGroupsByName");
		String resultJson = null;
		String accessToken=getAccessToken();
		if(StringUtils.containsWhitespace(groupName)){
			  groupName =groupName.replace(" ","%20");
			 
				System.out.println(groupName);
			}
			
		String url="https://graph.facebook.com/search?q="+groupName+"&type=page&fields=id,name,likes,cover&access_token="+accessToken+"";
		try {
			
			List<Group> groups = faceBookService.getGroups(url);
			GroupList groupList= new GroupList();
			groupList.setGroups(groups);
			resultJson = gson.toJson(groupList, GroupList.class);
			resultJson = handleSuccess(resultJson, null);
			
		} catch (BusinessException be) {
			be.printStackTrace();
			resultJson = handleBusinessError(be);
		} catch (Throwable th) {
			th.printStackTrace();
			resultJson = handleOtherError(th);
		}
		LOGGER.info("ends getFacebookGroupsByName");
		return resultJson;
	}

	/**
	 * This method is to get all the groups  information from facebook.
	 * 
	 * @param request
	 * @param response
	 * @return GroupList
	 */
	@RequestMapping(value = "/{group_id}", method = RequestMethod.GET)
	public @ResponseBody String getMetaData(@PathVariable("group_id") String groupId,HttpServletRequest request,
			HttpServletResponse response) {
		LOGGER.info("starts getMetaData");
		String resultJson = null;
		String accessToken=getAccessToken();
		
		
		try {
			
			GroupMetaDataBO metaData = faceBookService.getGroupMetaData(groupId,accessToken);
			resultJson = gson.toJson(metaData, GroupMetaDataBO.class);
			resultJson = handleSuccess(resultJson, null);
			
		} catch (BusinessException be) {
			be.printStackTrace();
			resultJson = handleBusinessError(be);
		} catch (Throwable th) {
			th.printStackTrace();
			resultJson = handleOtherError(th);
		}
		LOGGER.info("ends getMetaData");
		return resultJson;
	}
	
	public String getAccessToken(){
		

		 
		Properties prop = new Properties();
		InputStream input = null;
		String accessToken=null;
		try {
	 
			input = FaceBookController.class.getClassLoader().getResourceAsStream("facebook.properties");	 
			prop.load(input);
			 accessToken=prop.getProperty("access_token");	 
			System.out.println(accessToken);
			
	 
		} catch (IOException ex) {
			ex.printStackTrace();
		} finally {
			if (input != null) {
				try {
					input.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
	 
	  
		
		return accessToken;
	}

}
