package com.zen.smi.controller;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import sun.misc.BASE64Decoder;
import com.google.gson.Gson;
import com.zen.smi.bo.SocialMediaPostsBO;
import com.zen.smi.bo.SocialMediaPostsBOList;
import com.zen.smi.exception.BusinessException;
import com.zen.smi.generic.utils.MessageUtil;
import com.zen.smi.service.SocialMediaPostsService;


@Controller
@RequestMapping("/social_media_posts")
public class SocialMediaPostsController extends BaseController {

	/**
	 * Logger for SocialMediaPostsController class.
	 */
	private static final Logger LOGGER = Logger.getLogger(SocialMediaPostsController.class);

	@Autowired
	public SocialMediaPostsService socialMediaPostsService;

	@Autowired
	public Gson gson;
	
	@RequestMapping(value = "/list", method = RequestMethod.GET)
	public @ResponseBody String getSocialMediaPostsBO(HttpServletRequest request,
			HttpServletResponse response) {
		LOGGER.info("starts getSocialMediaPostsBO");
		String resultJson = null;
		
		try {
			
			List<SocialMediaPostsBO> socialMediaPostsBO= socialMediaPostsService.getSocialMediaPosts();
			SocialMediaPostsBOList socialMediaPostsBOList = new SocialMediaPostsBOList();
			socialMediaPostsBOList.setSocialMediaPostsBOList(socialMediaPostsBO);
			resultJson = gson.toJson(socialMediaPostsBOList, SocialMediaPostsBOList.class);
			resultJson = handleSuccess(resultJson, null);
			
		} catch (BusinessException be) {
			be.printStackTrace();
			resultJson = handleBusinessError(be);
		} catch (Throwable th) {
			th.printStackTrace();
			resultJson = handleOtherError(th);
		}
		LOGGER.info("ends getSocialMediaPostsBO");
		return resultJson;
	}
	
	@RequestMapping(value = "/list/{channel}", method = RequestMethod.GET)
	public @ResponseBody String getSocialMediaPostsBOByChannel(@PathVariable("channel") int channel,HttpServletRequest request,
			HttpServletResponse response) {
		LOGGER.info("starts getSocialMediaPostsBOByChannel");
		String resultJson = null;
		try {
			
			List<SocialMediaPostsBO> socialMediaPostsBO= socialMediaPostsService.getSocialMediaPostsByChannel(channel);
			SocialMediaPostsBOList socialMediaPostsBOList = new SocialMediaPostsBOList();
			socialMediaPostsBOList.setSocialMediaPostsBOList(socialMediaPostsBO);
			resultJson = gson.toJson(socialMediaPostsBOList, SocialMediaPostsBOList.class);
			resultJson = handleSuccess(resultJson, null);
			
		} catch (BusinessException be) {
			be.printStackTrace();
			resultJson = handleBusinessError(be);
		} catch (Throwable th) {
			th.printStackTrace();
			resultJson = handleOtherError(th);
		}
		LOGGER.info("ends getSocialMediaPostsBOByChannel");
		return resultJson;
	}
	
	@RequestMapping(value = "/{id}", method = RequestMethod.GET)
	public @ResponseBody String getSocialMediaPostsBOById(@PathVariable("id") int id,HttpServletRequest request,
			HttpServletResponse response) {
		LOGGER.info("starts getSocialMediaPostsBOById");
		String resultJson = null;
		try {
			
			SocialMediaPostsBO socialMediaPostsBO= socialMediaPostsService.getSocialMediaPostsId(id);
			resultJson = gson.toJson(socialMediaPostsBO, SocialMediaPostsBO.class);
			resultJson = handleSuccess(resultJson, null);
			
		} catch (BusinessException be) {
			be.printStackTrace();
			resultJson = handleBusinessError(be);
		} catch (Throwable th) {
			th.printStackTrace();
			resultJson = handleOtherError(th);
		}
		LOGGER.info("ends getSocialMediaPostsBOById");
		return resultJson;
	}
	
	@RequestMapping(value = "/save", method = RequestMethod.POST)
	public @ResponseBody String saveSocialMediaPostsBO(@RequestBody String inputString,HttpServletRequest request,
			HttpServletResponse response) {
		BASE64Decoder decoder = new BASE64Decoder();
		LOGGER.info("starts saveSocialMediaPostsBO");
		String resultJson = "";		
		String imagePath = request.getSession().getServletContext().getRealPath("/");
		try {
			SocialMediaPostsBO	socialMediaPostsBO=gson.fromJson(inputString, SocialMediaPostsBO.class);
			if(socialMediaPostsBO!=null){
				
				byte[] decodedBytes = decoder.decodeBuffer(socialMediaPostsBO.getImage());
			   String result=writeToFile( decodedBytes, imagePath,socialMediaPostsBO.getImageName());
			   if(result.equals("success")){
				   socialMediaPostsService.savePost(socialMediaPostsBO);
					resultJson = handleSuccess(resultJson, MessageUtil.getInstance().getMessage("SOCIAL_MEDIA_POSTS_CREATED", null));
			   }else{
				   BusinessException be=new BusinessException("","",result);
					resultJson =  handleBusinessError(be);
			   }				
			}
			
		} catch (BusinessException be) {
			be.printStackTrace();
			resultJson = handleBusinessError(be);
		} catch (Throwable th) {
			th.printStackTrace();
			resultJson = handleOtherError(th);
		}
		LOGGER.info("ends saveSocialMediaPostsBO");
		return resultJson;
	}
	
	
	@RequestMapping(value = "/update", method = RequestMethod.POST)
	public @ResponseBody String editSocialMediaPostsBO(@RequestBody String inputString,HttpServletRequest request,
			HttpServletResponse response) {
		LOGGER.info("starts editSocialMediaPostsBO");
		String resultJson = null;
		try {
			SocialMediaPostsBO	socialMediaPostsBO=gson.fromJson(inputString, SocialMediaPostsBO.class);
			if(socialMediaPostsBO!=null){
				
				socialMediaPostsService.editPost(socialMediaPostsBO);
				resultJson = handleSuccess(resultJson, MessageUtil.getInstance().getMessage("SOCIAL_MEDIA_POSTS_UPDATED", null));
			}
			
		} catch (BusinessException be) {
			be.printStackTrace();
			resultJson = handleBusinessError(be);
		} catch (Throwable th) {
			th.printStackTrace();
			resultJson = handleOtherError(th);
		}
		LOGGER.info("ends editSocialMediaPostsBO");
		return resultJson;
	}
	
	@RequestMapping(value = "/delete", method = RequestMethod.POST)
	public @ResponseBody String deleteSocialMediaPostsBO(@RequestBody String inputString,HttpServletRequest request,
			HttpServletResponse response) {
		LOGGER.info("starts deleteSocialMediaPostsBO");
		String resultJson = null;
		try {
			SocialMediaPostsBO	socialMediaPostsBO=gson.fromJson(inputString, SocialMediaPostsBO.class);
			if(socialMediaPostsBO!=null){
				
				socialMediaPostsService.deletePost(socialMediaPostsBO);
				resultJson = handleSuccess(resultJson, MessageUtil.getInstance().getMessage("SOCIAL_MEDIA_POSTS_DELETED", null));
			}
			
			resultJson = handleSuccess(resultJson, null);
			
		} catch (BusinessException be) {
			be.printStackTrace();
			resultJson = handleBusinessError(be);
		} catch (Throwable th) {
			th.printStackTrace();
			resultJson = handleOtherError(th);
		}
		LOGGER.info("ends deleteSocialMediaPostsBO");
		return resultJson;
	}
	
	public String writeToFile(byte[] imageData,String imgPath,String imageName){
		
		String result="success";
	    // Write bytes to  file.
	    final File imageFile = new File(imgPath, ""+imageName+"");
	    FileOutputStream outputStream = null;
	    try {
	    	outputStream = new FileOutputStream(imageFile);
	    	outputStream.write(imageData);	       
	    }
	    catch (FileNotFoundException e) {	       
	    	result= "FILE_NOT_FOUND";
	    }
	    catch (IOException e) {	      
	    	result= "IO_EXCEPTION";
	    }
	    finally {
	        if(outputStream != null)
	            try {
	            	outputStream.close();
	            } catch (IOException e) {
	            	result= "FILE_WRITE_EXCEPTION";
	            }
	    }
		return result;
	}
}
